import React, { useState, useEffect, useMemo } from 'react';
import axios from 'axios';
import Sidebar from "../components/Sidebar"; // ‚ùå [FIX] ‡∏•‡∏ö/‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏Å‡∏≤‡∏£ import ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏≠‡∏Å
// [EDIT] Import hooks ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á ID ‡∏à‡∏≤‡∏Å URL ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏¢‡πâ‡∏≤‡∏¢‡∏´‡∏ô‡πâ‡∏≤
import { useParams, useNavigate } from 'react-router-dom';

// [EDIT] ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠ Component ‡πÉ‡∏´‡∏°‡πà (‡πÄ‡∏ä‡πà‡∏ô ExamPlannerEdit)
export default function ExamPlannerEdit() {
    // [EDIT] ‡∏î‡∏∂‡∏á planId ‡∏à‡∏≤‡∏Å URL ‡πÅ‡∏•‡∏∞ navigate function
    const { planId } = useParams();
    const navigate = useNavigate();

    // State for Exam Details
    const [examTitle, setExamTitle] = useState('');
    const [examSubjects, setExamSubjects] = useState([]); 
    const [examDate, setExamDate] = useState('');

    // State for fetching subjects (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
    const [subjects, setSubjects] = useState([]);
    const [isLoadingSubjects, setIsLoadingSubjects] = useState(true);
    const [subjectError, setSubjectError] = useState('');

    // State for preparation period (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
    const [prepStartDate, setPrepStartDate] = useState('');
    const [prepEndDate, setPrepEndDate] = useState('');
    const [defaultStartTime, setDefaultStartTime] = useState('09:00');
    const [defaultEndTime, setDefaultEndTime] = useState('17:00');
    
    // State for the generated daily schedule (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
    const [dailySchedule, setDailySchedule] = useState([]);

    // State for notification preference (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
    const [sendNotifications, setSendNotifications] = useState(true);

    // [EDIT] State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏ú‡∏ô‡πÄ‡∏Å‡πà‡∏≤
    const [isLoadingPlan, setIsLoadingPlan] = useState(true);
    const [planError, setPlanError] = useState('');

    // Effect to fetch user's subjects on component mount (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
    useEffect(() => {
        const fetchSubjects = async () => {
            console.log("üîÑ Starting to fetch subjects...");
            setIsLoadingSubjects(true);
            setSubjectError('');
            
            try {
                const API_URL = "http://localhost:5000/api/subjects/";
                const response = await axios.get(API_URL, { 
                    withCredentials: true,
                    timeout: 5000,
                    headers: { 'Content-Type': 'application/json' }
                });
                
                const fetchedSubjects = response.data;

                if (!Array.isArray(fetchedSubjects)) {
                    setSubjectError("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
                    setSubjects([]);
                } else if (fetchedSubjects.length === 0) {
                    setSubjectError("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö (‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤ '‡∏ß‡∏¥‡∏ä‡∏≤‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏¥‡∏ä‡∏≤)");
                    setSubjects([]);
                } else {
                    setSubjects(fetchedSubjects);
                }
                
            } catch (error) {
                console.error("‚ùå Failed to fetch subjects:", error);
                if (error.response) {
                    setSubjectError(`‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö: ${error.response.data.message || error.response.status}`);
                } else if (error.request) {
                    setSubjectError("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ");
                } else {
                    setSubjectError(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`);
                }
                setSubjects([]);
            } finally {
                setIsLoadingSubjects(false);
                console.log("üèÅ Fetch subjects completed");
            }
        };

        fetchSubjects();
    }, []); // ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß

    // [EDIT] Effect ‡πÉ‡∏´‡∏°‡πà: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡∏ô‡πÄ‡∏Å‡πà‡∏≤‡∏°‡∏≤‡πÅ‡∏™‡∏î‡∏á
    useEffect(() => {
        const fetchPlan = async () => {
            if (!planId) {
                setIsLoadingPlan(false);
                setPlanError("‡πÑ‡∏°‡πà‡∏û‡∏ö ID ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ú‡∏ô");
                return;
            }
            console.log(`üîÑ Fetching plan with ID: ${planId}...`);
            setIsLoadingPlan(true);
            setPlanError('');
            
            try {
                const API_URL = `http://localhost:5000/api/exam-plan/${planId}`;
                const response = await axios.get(API_URL, { 
                    withCredentials: true,
                    timeout: 5000,
                });
                
                const plan = response.data;
                console.log("‚úÖ Fetched plan:", plan);

                // Set ‡∏Ñ‡πà‡∏≤ State ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤
                setExamTitle(plan.exam_title || '');
                setExamSubjects(plan.subjects || []);
                // (‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏ß‡πà‡∏≤ backend ‡∏™‡πà‡∏á YYYY-MM-DD)
                setExamDate(plan.exam_date ? plan.exam_date.split('T')[0] : '');
                
                setPrepStartDate(plan.prep_start_date ? plan.prep_start_date.split('T')[0] : '');
                setPrepEndDate(plan.prep_end_date ? plan.prep_end_date.split('T')[0] : '');
                setDefaultStartTime(plan.default_start_time || '09:00');
                setDefaultEndTime(plan.default_end_time || '17:00');
                
                // *** ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç ***
                // ‡πÉ‡∏ä‡πâ 'raw_study_plan_input' ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô
                if (plan.raw_study_plan_input && plan.raw_study_plan_input.length > 0) {
                    const savedSchedule = plan.raw_study_plan_input.map(day => ({
                        ...day,
                        date: day.date.split('T')[0] // ‡∏Å‡∏±‡∏ô‡πÄ‡∏´‡∏ô‡∏µ‡∏¢‡∏ß
                    }));
                    setDailySchedule(savedSchedule);
                }
                
                setSendNotifications(plan.send_notifications || false);

            } catch (error) {
                console.error("‚ùå Failed to fetch plan:", error);
                if (error.response) {
                    setPlanError(`‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö: ${error.response.data.message || error.response.status}`);
                } else if (error.request) {
                    setPlanError("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ");
                } else {
                    setPlanError(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`);
                }
            } finally {
                setIsLoadingPlan(false);
                console.log("üèÅ Fetch plan completed");
            }
        };
        
        fetchPlan();
    }, [planId]); // ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠ planId ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô

    
    // [EDIT] ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Effect ‡∏ô‡∏µ‡πâ:
    // ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÉ‡∏´‡πâ‡∏°‡∏±‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô *‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°*
    // ‡πÅ‡∏ï‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏ß‡∏¢ 'raw_study_plan_input' ‡∏à‡∏≤‡∏Å Effect ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô
    // ‡∏ã‡∏∂‡πà‡∏á Effect ‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô *‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å* Effect (fetchPlan) ‡πÑ‡∏î‡πâ setPrepStartDate/EndDate
    // ‡πÅ‡∏ï‡πà‡πÄ‡∏£‡∏≤‡πÑ‡∏î‡πâ setDailySchedule ‡∏à‡∏≤‡∏Å `raw_study_plan_input` ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‡∏°‡∏±‡∏ô‡∏à‡∏∂‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏£
    // **‡∏´‡∏£‡∏∑‡∏≠** ‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ *‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô* ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ Edit ‡∏ô‡∏µ‡πâ ‡∏°‡∏±‡∏ô‡∏Å‡πá‡∏à‡∏∞ regenerate ‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ (‡∏ã‡∏∂‡πà‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á)
    useEffect(() => {
        // ‡πÄ‡∏ä‡πá‡∏Å‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏ú‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡∏•‡πà‡∏≤ ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πà ‡∏≠‡∏¢‡πà‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏á gen ‡∏ó‡∏±‡∏ö
        if (isLoadingPlan) return; 

        if (prepStartDate && prepEndDate && new Date(prepStartDate) <= new Date(prepEndDate)) {
            const start = new Date(prepStartDate);
            const end = new Date(prepEndDate);
            const days = [];
            
            // [EDIT] ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö dailySchedule ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà *‡∏Å‡πà‡∏≠‡∏ô* ‡∏ß‡∏ô‡∏•‡∏π‡∏õ
            // ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£ reset ‡∏Ñ‡πà‡∏≤ ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏Å‡πâ default time
            const existingScheduleMap = new Map(dailySchedule.map(d => [d.date, d]));

            for (let dt = new Date(start); dt <= end; dt.setDate(dt.getDate() + 1)) {
                const dateString = new Date(dt).toISOString().split('T')[0];
                const existingDay = existingScheduleMap.get(dateString);

                if (existingDay) {
                    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°
                    days.push(existingDay);
                } else {
                    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ (‡πÄ‡∏ä‡πà‡∏ô ‡∏Ç‡∏¢‡∏≤‡∏¢‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤) ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ default
                    days.push({
                        date: dateString,
                        isAvailable: true,
                        startTime: defaultStartTime,
                        endTime: defaultEndTime,
                    });
                }
            }
            
            // [EDIT] ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÉ‡∏´‡∏°‡πà
            const newSchedule = days.filter(d => {
                const dDate = new Date(d.date);
                // ‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡∏≠‡∏á start/end ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ó‡∏µ‡πà‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥
                const startDate = new Date(start.toISOString().split('T')[0] + 'T00:00:00');
                const endDate = new Date(end.toISOString().split('T')[0] + 'T00:00:00');
                return dDate >= startDate && dDate <= endDate;
            });
            
            setDailySchedule(newSchedule);

        } else {
            setDailySchedule([]);
        }
    // [EDIT] ‡∏ï‡∏±‡∏î dailySchedule ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å dependency array ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
    }, [prepStartDate, prepEndDate, defaultStartTime, defaultEndTime, isLoadingPlan]); 

    // Memoized calculation (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
    const formattedDays = useMemo(() => {
        return dailySchedule.map(day => {
            const dateObj = new Date(day.date + 'T00:00:00'); // ‡πÉ‡∏ä‡πâ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ö‡∏ö local
            return {
                ...day,
                displayDate: dateObj.toLocaleDateString('th-TH', {
                    weekday: 'long', year: 'numeric', month: 'long', day: 'numeric',
                }),
            };
        });
    }, [dailySchedule]);

    // Handler to update a specific day (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
    const handleDayChange = (index, field, value) => {
        const updatedSchedule = [...dailySchedule];
        updatedSchedule[index] = { ...updatedSchedule[index], [field]: value };
        setDailySchedule(updatedSchedule);
    };
    
    // Handler to add/remove subjects (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
    const handleSubjectChange = (e) => {
        const { value, checked } = e.target;
    
        if (checked) {
            const selectedSubject = subjects.find(s => s.title === value);
            if (selectedSubject) {
                setExamSubjects(prev => [
                    ...prev,
                    {
                        name: selectedSubject.title,
                        priority: selectedSubject.priority ?? 1,
                    },
                ]);
            }
        } else {
            setExamSubjects(prev => prev.filter(subject => subject.name !== value));
        }
    };

    // üí° [NEW] Handlers ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const handleSelectAllDays = () => {
        setDailySchedule(prevSchedule => 
            prevSchedule.map(day => ({ ...day, isAvailable: true }))
        );
    };

    const handleDeselectAllDays = () => {
        setDailySchedule(prevSchedule => 
            prevSchedule.map(day => ({ ...day, isAvailable: false }))
        );
    };

    // [EDIT] Handler to reset/cancel
    const handleCancel = () => {
        // ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏ß‡∏°‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ö
        navigate('/ExamPlanList'); 
    };

    // [EDIT] Handler to submit form (‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô handleUpdate)
    const handleUpdate = async (e) => {
        e.preventDefault();
        
        console.log("üöÄ Submitting exam plan UPDATE...");
        
        if (!examTitle || !examDate) {
            alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô");
            return;
        }
        if (examSubjects.length === 0) {
            alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ä‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏ß‡∏¥‡∏ä‡∏≤");
            return;
        }
        if (dailySchedule.length === 0) {
            alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ï‡∏±‡∏ß‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
            return;
        }

        const studyPlan = dailySchedule
            .filter(day => day.isAvailable)
            .map(({ date, startTime, endTime }) => ({ date, startTime, endTime }));

        if (studyPlan.length === 0) {
            alert("‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ß‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡πà‡∏≤‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡πÄ‡∏•‡∏¢ (‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡∏ñ‡∏π‡∏Å‡∏ï‡∏¥‡πä‡∏Å '‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á')");
            return;
        }

        // --- Payload Creation ---
        const payload = {
            examTitle,
            examSubjects: examSubjects,
            examDate,
            studyPlan, // ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà filter ‡πÅ‡∏•‡πâ‡∏ß
            sendNotifications: sendNotifications,
            
            // [EDIT] ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• input ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢ (‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà backend PUT route ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
            prepStartDate: prepStartDate,
            prepEndDate: prepEndDate,
            defaultStartTime: defaultStartTime,
            defaultEndTime: defaultEndTime,
            raw_study_plan_input: dailySchedule // ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏î‡∏¥‡∏ö‡∏Å‡πà‡∏≠‡∏ô filter
        };

        console.log("üì§ Update Payload:", payload);

        try {
            // [EDIT] ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô axios.put ‡πÅ‡∏•‡∏∞‡πÉ‡∏™‡πà planId
            const res = await axios.put(
                `http://localhost:5000/api/exam-plan/${planId}`, 
                payload,
                { 
                    withCredentials: true,
                    headers: {
                        'Content-Type': 'application/json',
                    }
                }
            );
            
            console.log("‚úÖ Success:", res.data);
            alert(res.data.message || "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏™‡∏≠‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
            
            // [EDIT] ‡∏û‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏ß‡∏° (Path ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á)
            navigate('/ExamPlanList');

        } catch (err) {
            console.error("‚ùå Submission error:", err);
            console.error("Response:", err.response?.data);
            alert(err.response?.data?.message || err.response?.data?.error || "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
        }
    };

    // [EDIT] ‡πÄ‡∏û‡∏¥‡πà‡∏° UI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Loading ‡πÅ‡∏•‡∏∞ Error
    if (isLoadingPlan) {
        return (
            <div className="flex bg-gray-50 min-h-screen">
                {/* <Sidebar /> */} {/* ‚ùå [FIX] ‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå Sidebar ‡∏≠‡∏≠‡∏Å */}
                <div className="flex-1 p-4 sm:p-8 flex items-center justify-center">
                    <div className="flex items-center gap-3 text-gray-600">
                        <div className="animate-spin h-8 w-8 border-4 border-blue-500 border-t-transparent rounded-full"></div>
                        <span className="text-xl font-semibold">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡∏ô...</span>
                    </div>
                </div>
            </div>
        );
    }

    if (planError) {
         return (
            <div className="flex bg-gray-50 min-h-screen">
                {/* <Sidebar /> */} {/* ‚ùå [FIX] ‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå Sidebar ‡∏≠‡∏≠‡∏Å */}
                <div className="flex-1 p-4 sm:p-8">
                    <div className="max-w-lg mx-auto mt-10 text-center p-6 bg-white rounded-2xl shadow-lg">
                        <h2 className="text-2xl font-bold text-red-600 mb-4">‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î</h2>
                        <p className="text-gray-700 mb-6">{planError}</p>
                        <button 
                            onClick={() => navigate('/ExamPlanList')} // ‡πÅ‡∏Å‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏ß‡∏°‡πÄ‡∏™‡∏°‡∏≠
                            className="px-6 py-2 rounded-full bg-blue-600 text-white font-semibold hover:bg-blue-700 transition"
                        >
                            ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏ß‡∏°
                        </button>
                    </div>
                </div>
            </div>
        );
    }

    // --- JSX Return (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡πÄ‡∏Å‡∏∑‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î) ---
    return (
        <div className="flex bg-gray-50 min-h-screen">
            { <Sidebar /> } {/* ‚ùå [FIX] ‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå Sidebar ‡∏≠‡∏≠‡∏Å */}

            <div className="flex-1 p-4 sm:p-8">
                <div className="max-w-4xl mx-auto">
                    
                    {/* [EDIT] ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠ */}
                    <h1 className="text-3xl font-bold mb-6 text-gray-800">‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏ú‡∏ô‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏™‡∏≠‡∏ö</h1>

                    {/* [EDIT] ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô onSubmit ‡πÄ‡∏õ‡πá‡∏ô handleUpdate */}
                    <form onSubmit={handleUpdate} className="bg-white rounded-2xl shadow-lg p-6 sm:p-10 space-y-8">
                        
                        {/* 1. Exam Information Section */}
                        <div className="border border-gray-200 rounded-xl p-6">
                            <h2 className="text-xl font-semibold mb-5 text-gray-700">1. ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ö</h2>
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-2">‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ö</label>
                                    <input 
                                        type="text" 
                                        placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏™‡∏≠‡∏ö‡∏õ‡∏•‡∏≤‡∏¢‡∏†‡∏≤‡∏Ñ" 
                                        value={examTitle} 
                                        onChange={e => setExamTitle(e.target.value)} 
                                        className="w-full px-4 py-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-blue-500 focus:outline-none transition" 
                                    />
                                </div>
                                
                                {/* Subject Selection UI */}
                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-2">‡∏ß‡∏¥‡∏ä‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏ö (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤)</label>
                                    {isLoadingSubjects ? (
                                        <div className="w-full px-4 py-3 rounded-lg border border-gray-200 bg-gray-100 text-gray-500 flex items-center gap-2">
                                            <div className="animate-spin h-4 w-4 border-2 border-blue-500 border-t-transparent rounded-full"></div>
                                            ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤...
                                        </div>
                                    ) : subjectError ? (
                                        <div className="space-y-2">
                                            <div className="w-full px-4 py-3 rounded-lg border-2 border-red-300 bg-red-50 text-red-600 text-sm">
                                                ‚ö†Ô∏è {subjectError}
                                            </div>
                                            <a
                                                href="/Subject"
                                                className="w-full px-4 py-3 rounded-lg border-2 border-dashed border-blue-500 text-blue-600 font-semibold hover:bg-blue-50 transition flex items-center justify-center gap-2"
                                            >
                                                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                                    <path fillRule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clipRule="evenodd" />
                                                </svg>
                                                ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤‡πÉ‡∏´‡∏°‡πà
                                            </a>
                                        </div>
                                    ) : subjects.length > 0 ? (
                                        <div className="space-y-3 p-4 border border-gray-200 rounded-lg max-h-40 overflow-y-auto">
                                            {subjects.map((subject) => (
                                                <label key={subject._id} className="flex items-center gap-3 cursor-pointer">
                                                    <input
                                                        type="checkbox"
                                                        value={subject.title}
                                                        // [EDIT] checked logic ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ä‡πá‡∏Å‡∏à‡∏≤‡∏Å examSubjects state
                                                        checked={examSubjects.some(s => s.name === subject.title)}
                                                        onChange={handleSubjectChange}
                                                        className="w-5 h-5 text-blue-600 rounded border-gray-300 focus:ring-blue-500"
                                                    />
                                                    <span className="font-medium text-gray-800">{subject.title}</span>
                                                    {subject.priority && ( 
                                                        <span className="text-xs text-gray-500 ml-2">
                                                            (‡∏£‡∏∞‡∏î‡∏±‡∏ö: {subject.priority})
                                                        </span>
                                                    )}
                                                </label>
                                            ))}
                                        </div>
                                    ) : (
                                        <a
                                            href="/Subject" 
                                            className="w-full px-4 py-3 rounded-lg border-2 border-dashed border-blue-500 text-blue-600 font-semibold hover:bg-blue-50 transition flex items-center justify-center gap-2"
                                        >
                                            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                                <path fillRule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clipRule="evenodd" />
                                            </svg>
                                            ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤‡πÉ‡∏´‡∏°‡πà
                                        </a>
                                    )}
                                </div>

                                <div className="md:col-span-2">
                                    <label className="block text-sm font-medium text-gray-700 mb-2">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏ö</label>
                                    <input 
                                        type="date" 
                                        value={examDate} 
                                        onChange={e => setExamDate(e.target.value)} 
                                        className="w-full md:w-1/2 px-4 py-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-blue-500 focus:outline-none transition" 
                                    />
                                </div>
                            </div>
                        </div>

                        {/* 2. Preparation Period Section */}
                        <div className="border border-gray-200 rounded-xl p-6">
                            <h2 className="text-xl font-semibold mb-5 text-gray-700">2. ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ï‡∏±‡∏ß</h2>
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-2">‡∏ß‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ï‡∏±‡∏ß</label>
                                    <input 
                                        type="date" 
                                        value={prepStartDate} 
                                        onChange={e => setPrepStartDate(e.target.value)} 
                                        className="w-full px-4 py-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-blue-500 focus:outline-none transition" 
                                    />
                                </div>
                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-2">‡∏ß‡∏±‡∏ô‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ï‡∏±‡∏ß</label>
                                    <input 
                                        type="date" 
                                        value={prepEndDate} 
                                        onChange={e => setPrepEndDate(e.target.value)} 
                                        className="w-full px-4 py-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-blue-500 focus:outline-none transition" 
                                    />
                                </div>
                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-2">‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡πà‡∏≤‡∏ô (‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô)</label>
                                    <input 
                                        type="time" 
                                        value={defaultStartTime} 
                                        onChange={e => setDefaultStartTime(e.target.value)} 
                                        className="w-full px-4 py-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-blue-500 focus:outline-none transition" 
                                    />
                                </div>
                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-2">‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡πà‡∏≤‡∏ô (‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î)</label>
                                    <input 
                                        type="time" 
                                        value={defaultEndTime} 
                                        onChange={e => setDefaultEndTime(e.target.value)} 
                                        className="w-full px-4 py-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-blue-500 focus:outline-none transition" 
                                    />
                                </div>
                            </div>
                        </div>

                        {/* 3. Daily Study Schedule Section */}
                        {formattedDays.length > 0 && (
                            <div className="border border-gray-200 rounded-xl p-6">
                                <h2 className="text-xl font-semibold mb-4 text-gray-700">3. ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô</h2>
                                
                                {/* üí° [NEW] ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î/‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î */}
                                <div className="flex gap-2 mb-4">
                                    <button
                                        type="button"
                                        onClick={handleSelectAllDays}
                                        className="px-4 py-1 text-xs font-medium text-blue-700 bg-blue-100 rounded-full hover:bg-blue-200 transition"
                                    >
                                        ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô
                                    </button>
                                    <button
                                        type="button"
                                        onClick={handleDeselectAllDays}
                                        className="px-4 py-1 text-xs font-medium text-gray-700 bg-gray-100 rounded-full hover:bg-gray-200 transition"
                                    >
                                        ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô
                                    </button>
                                </div>
                                {/* üí° [END NEW] */}

                                <div className="space-y-4 max-h-96 overflow-y-auto pr-2">
                                    {formattedDays.map((day, index) => (
                                        <div 
                                            key={day.date} 
                                            className={`p-4 rounded-lg transition-all ${day.isAvailable ? 'bg-blue-50 border-2 border-blue-200' : 'bg-gray-100 opacity-70 border-2 border-gray-200'}`}
                                        >
                                            <div className="flex flex-wrap items-center justify-between gap-4">
                                                <div className="flex-grow font-semibold text-gray-800">{day.displayDate}</div>
                                                <div className="flex items-center gap-3">
                                                    <label className="flex items-center gap-2 cursor-pointer">
                                                        <input 
                                                            type="checkbox" 
                                                            checked={day.isAvailable} 
                                                            onChange={e => handleDayChange(index, 'isAvailable', e.target.checked)} 
                                                            className="w-5 h-5 text-blue-600 rounded border-gray-300 focus:ring-blue-500" 
                                                        />
                                                        <span className="font-medium text-sm text-gray-700">‡∏≠‡πà‡∏≤‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ</span>
                                                    </label>
                                                </div>
                                            </div>
                                            {day.isAvailable && (
                                                <div className="grid grid-cols-1 sm:grid-cols-2 gap-4 mt-3 pl-8 border-l-2 border-blue-300 ml-2">
                                                    <div>
                                                        <label className="block text-xs font-medium text-gray-600 mb-1">‡πÄ‡∏£‡∏¥‡πà‡∏°</label>
                                                        <input 
                                                            type="time" 
                                                            value={day.startTime} 
                                                            onChange={e => handleDayChange(index, 'startTime', e.target.value)} 
                                                            className="w-full px-3 py-2 text-sm rounded-md border border-gray-300 focus:ring-1 focus:ring-blue-500 focus:outline-none transition" 
                                                        />
                                                    </div>
                                                    <div>
                                                        <label className="block text-xs font-medium text-gray-600 mb-1">‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î</label>
                                                        <input 
                                                            type="time" 
                                                            value={day.endTime} 
                                                            onChange={e => handleDayChange(index, 'endTime', e.target.value)} 
                                                            className="w-full px-3 py-2 text-sm rounded-md border border-gray-300 focus:ring-1 focus:ring-blue-500 focus:outline-none transition" 
                                                        />
                                                    </div>
                                                </div>
                                            )}
                                        </div>
                                    ))}
                                </div>
                            </div>
                        )}

                        {/* 4. Notification Toggle Section */}
                        <div className="flex items-center justify-start p-4 bg-gray-50 rounded-xl border border-gray-200">
                            <div className="flex items-center h-5">
                                <input
                                    id="sendNotifications"
                                    name="sendNotifications"
                                    type="checkbox"
                                    checked={sendNotifications}
                                    onChange={(e) => setSendNotifications(e.target.checked)}
                                    className="w-5 h-5 text-blue-600 rounded border-gray-300 focus:ring-blue-500 cursor-pointer"
                                />
                            </div>
                            <div className="ml-4 text-sm">
                                <label htmlFor="sendNotifications" className="font-medium text-gray-800 cursor-pointer">
                                    ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
                                </label>
                                <p className="text-gray-500 text-xs mt-1">
                                    ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ï‡∏≤‡∏°‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
                                </p>
                            </div>
                        </div>

                        {/* 5. Action Buttons */}
                        <div className="flex gap-4 pt-6 justify-end border-t border-gray-200">
                            <button 
                                type="button" 
                                onClick={handleCancel} 
                                className="px-8 py-3 rounded-full bg-gray-200 text-gray-800 font-semibold hover:bg-gray-300 transition text-base"
                            >
                                ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                            </button>
                            <button 
                                type="submit" 
                                className="px-8 py-3 rounded-full bg-blue-600 text-white font-semibold hover:bg-blue-700 transition text-base"
                            >
                                {/* [EDIT] ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏∏‡πà‡∏° */}
                                ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    );
}

