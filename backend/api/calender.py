from flask import Flask, request, jsonify, Blueprint, session, make_response
from flask_cors import CORS
import secrets 
import math
from pymongo import MongoClient
from bson.objectid import ObjectId
from bson.errors import InvalidId
from datetime import datetime, date, timedelta # üí° [‡πÄ‡∏û‡∏¥‡πà‡∏°] timedelta
import os
import traceback 

# --- 1. Blueprint Setup ---
calender_bp = Blueprint('calender', __name__, url_prefix='/calender')

CORS(calender_bp, 
     origins=["http://localhost:5173"], 
     supports_credentials=True,       
     methods=["GET", "POST", "PUT", "OPTIONS"] 
)

# --- 2. Database Connection ---
client = MongoClient(os.getenv("MONGODB_URI", "mongodb://localhost:27017/"))
db = client['mydatabase']
users_collection = db['users']

try:
    client.admin.command('ping')
    print("‚úÖ MongoDB connection successful.")
except Exception as e:
    print(f"‚ùå MongoDB connection failed: {e}")
    
db = client.get_database(os.getenv("MONGO_DB_NAME", "mydatabase"))
subjects_collection = db["subject"]
exam_plans_collection = db["exam_plans"]

# --- 3. Helper Functions (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ---

def time_to_minutes(time_str):
    try:
        hours, minutes = map(int, time_str.split(':'))
        return (hours * 60) + minutes
    except Exception as e:
        print(f"Error parsing time: {time_str}, {e}")
        return 0

def minutes_to_time(total_minutes):
    hours = total_minutes // 60
    minutes = total_minutes % 60
    return f"{hours:02d}:{minutes:02d}"

def generate_weighted_schedule(subjects, study_slots):
    # (Logic ‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏ï‡∏≠‡∏ô 'add_exam_plan' ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏ï‡∏≠‡∏ô 'reschedule' ‡πÅ‡∏•‡πâ‡∏ß)
    if not subjects or not study_slots:
        return []
    total_priority = sum(s.get('priority', 1) for s in subjects)
    if total_priority == 0:
        return [{**slot, 'subject': 'Free Slot'} for slot in study_slots]
    total_slots = len(study_slots)
    slots_per_point = total_slots / total_priority
    subject_allocation = {}
    allocated_count = 0
    sorted_subjects = sorted(subjects, key=lambda s: s.get('priority', 1), reverse=True)
    for s in sorted_subjects:
        count = math.floor(s.get('priority', 1) * slots_per_point)
        subject_allocation[s['name']] = count
        allocated_count += count
    remainder = total_slots - allocated_count
    idx = 0
    while remainder > 0:
        subject_to_add = sorted_subjects[idx % len(sorted_subjects)]
        subject_allocation[subject_to_add['name']] += 1
        remainder -= 1
        idx += 1
    final_schedule = []
    allocation_counts = subject_allocation.copy()
    available_subjects = [s for s in sorted_subjects if allocation_counts.get(s['name'], 0) > 0]
    for i in range(total_slots):
        if not available_subjects:
            break
        subject_to_schedule = available_subjects[i % len(available_subjects)]
        final_schedule.append({
            **study_slots[i], 
            'subject': subject_to_schedule['name']
        })
        allocation_counts[subject_to_schedule['name']] -= 1
        if allocation_counts[subject_to_schedule['name']] == 0:
            available_subjects = [s for s in available_subjects if s['name'] != subject_to_schedule['name']]
    return final_schedule


# --- 4. Routes (Get, Add, Progress - ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ---

@calender_bp.route("/api/subjects/", methods=["GET"])
def get_user_subjects():
    # (‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°)
    if "user_id" not in session:
         return jsonify({"message": "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤ login ‡∏Å‡πà‡∏≠‡∏ô"}), 401
    try:
        user_id = ObjectId(session["user_id"])
        cursor = subjects_collection.find({"user_id": user_id})
        subjects_list = [
            {"_id": str(doc["_id"]), "title": doc.get("title", "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡∏ä‡∏≤"), "priority": doc.get("priority", 1)}
            for doc in cursor
        ]
        return jsonify(subjects_list), 200
    except Exception as e:
        print(f"[ERROR] get_user_subjects: {e}")
        return jsonify({"message": "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏¥‡∏ä‡∏≤", "error": str(e)}), 500

@calender_bp.route("/api/exam-plan/", methods=["POST"])
def add_exam_plan():
    # (‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏° - ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏° slot_id ‡πÅ‡∏•‡∏∞ status)
    if "user_id" not in session:
         return jsonify({"message": "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤ login ‡∏Å‡πà‡∏≠‡∏ô"}), 401
    try:
        data = request.json
        # ... (Validations) ...
        required_fields = ["examTitle", "examDate", "studyPlan", "examSubjects"]
        # ... (Validations) ...
        study_plan_slots_raw = data["studyPlan"] 
        # ... (Logic ‡∏ã‡∏≠‡∏¢‡∏¢‡πà‡∏≠‡∏¢‡πÄ‡∏ß‡∏•‡∏≤) ...
        available_time_slots = [] 
        slot_duration = 60 
        for day in study_plan_slots_raw:
            current_slot_start = time_to_minutes(day['startTime'])
            day_end = time_to_minutes(day['endTime'])
            while current_slot_start < day_end and (current_slot_start + slot_duration) <= day_end:
                available_time_slots.append({
                    'date': day['date'],
                    'startTime': minutes_to_time(current_slot_start),
                    'endTime': minutes_to_time(current_slot_start + slot_duration),
                })
                current_slot_start += slot_duration
        if not available_time_slots:
             return jsonify({"message": "‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠ (‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á)"}), 400
        
        exam_subjects = data["examSubjects"]
        scheduled_plan = generate_weighted_schedule(exam_subjects, available_time_slots)
        
        final_schedule_with_ids = []
        for i, slot in enumerate(scheduled_plan):
            final_schedule_with_ids.append({
                **slot,
                "slot_id": f"slot_{secrets.token_hex(8)}", 
                "status": "pending" 
            })
        user_id = session["user_id"]
        new_plan = {
            "user_id": ObjectId(user_id),
            "exam_title": data["examTitle"],
            "subjects": exam_subjects, 
            "exam_date": data["examDate"],
            "study_plan_raw": study_plan_slots_raw, 
            "generated_schedule": final_schedule_with_ids,
            "createdAt": datetime.utcnow(),
            "status": "active"
        }
        result = exam_plans_collection.insert_one(new_plan)
        return jsonify({
            "message": "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
            "plan_id": str(result.inserted_id),
            "generatedSchedule": final_schedule_with_ids
        }), 201
    except Exception as e:
        print(f"[ERROR] add_exam_plan: {e}\n{traceback.format_exc()}")
        return jsonify({"message": "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏ú‡∏ô", "error": str(e)}), 500

@calender_bp.route("/api/exam-plans/", methods=["GET"])
def get_exam_plans():
    # (‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°)
    if "user_id" not in session:
        return jsonify({"message": "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤ login ‡∏Å‡πà‡∏≠‡∏ô"}), 401
    try:
        user_id = ObjectId(session["user_id"])
        plans_cursor = exam_plans_collection.find({"user_id": user_id}).sort("createdAt", -1)
        plans = list(plans_cursor)
        for plan in plans:
            plan["_id"] = str(plan["_id"])
            plan["user_id"] = str(plan["user_id"])
            if "generated_schedule" in plan:
                plan["study_plan"] = plan["generated_schedule"]
        return jsonify(plans), 200
    except Exception as e:
        print(f"[ERROR] get_exam_plans: {e}")
        return jsonify({"message": "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î"}), 500
    
@calender_bp.route("/api/exam-plan/<plan_id>", methods=["GET"])
def get_single_exam_plan(plan_id):
    # (‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°)
    if "user_id" not in session:
         return jsonify({"message": "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤ login ‡∏Å‡πà‡∏≠‡∏ô"}), 401
    try:
        user_id = ObjectId(session["user_id"])
        plan = exam_plans_collection.find_one({"_id": ObjectId(plan_id), "user_id": user_id})
        if not plan:
            return jsonify({"message": "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ö‡∏ô‡∏µ‡πâ"}), 404
        plan["_id"] = str(plan["_id"])
        plan["user_id"] = str(plan["user_id"])
        if "generated_schedule" in plan:
            plan["study_plan"] = plan["generated_schedule"]
        return jsonify(plan), 200
    except InvalidId:
        return jsonify({"message": "ID ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ú‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"}), 400
    except Exception as e:
        print(f"[ERROR] get_single_exam_plan: {e}")
        return jsonify({"message": "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"}), 500

@calender_bp.route("/api/exam-plan/<plan_id>/progress", methods=["PUT", "OPTIONS"])
def update_plan_progress(plan_id):
    # (‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°)
    if request.method == 'OPTIONS':
        return make_response(jsonify({"message": "CORS preflight OK"}), 200)
    if "user_id" not in session:
        return jsonify({"message": "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤ login ‡∏Å‡πà‡∏≠‡∏ô"}), 401
    try:
        user_id = ObjectId(session["user_id"])
        data = request.json
        updated_chapters = data.get('chapters') 
        if not isinstance(updated_chapters, list):
            return jsonify({"message": "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 'chapters' ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤"}), 400
        result = exam_plans_collection.update_one(
            {"_id": ObjectId(plan_id), "user_id": user_id},
            {"$set": {"generated_schedule": updated_chapters}}
        )
        if result.matched_count == 0:
            return jsonify({"message": "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ö‡∏ô‡∏µ‡πâ"}), 404
        return jsonify({"message": "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢"}), 200
    except InvalidId:
        return jsonify({"message": "ID ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ú‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"}), 400
    except Exception as e:
        print(f"[ERROR] update_plan_progress: {e}\n{traceback.format_exc()}")
        return jsonify({"message": "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å"}), 500

# --- 5. üí° [‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏ß‡∏¢ LOGIC ‡πÉ‡∏´‡∏°‡πà] ---
@calender_bp.route("/api/exam-plan/<plan_id>/reschedule", methods=["POST", "OPTIONS"])
def reschedule_plan(plan_id):

    # 1. ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï OPTIONS ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏ä‡πá‡∏Ñ Login
    if request.method == 'OPTIONS':
        return make_response(jsonify({"message": "CORS preflight OK"}), 200)

    if "user_id" not in session:
        return jsonify({"message": "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤ login ‡∏Å‡πà‡∏≠‡∏ô"}), 401

    try:
        user_id = ObjectId(session["user_id"])
        data = request.json
        date_to_postpone_str = data.get('date').split('T')[0] 
        
        # 2. Fetch ‡πÅ‡∏ú‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        plan = exam_plans_collection.find_one({
            "_id": ObjectId(plan_id), 
            "user_id": user_id
        })
        if not plan:
            return jsonify({"message": "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ö‡∏ô‡∏µ‡πâ"}), 404
        
        current_schedule = plan.get('generated_schedule', [])
        exam_subjects_raw = plan.get('subjects', []) # ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡∏ä‡∏≤‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÄ‡∏î‡∏¥‡∏°
        study_plan_raw = plan.get('study_plan_raw', []) # ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö
        exam_date_str = plan.get('exam_date')

        # 3. üí° [Logic ‡πÉ‡∏´‡∏°‡πà] - ‡∏õ‡∏±‡πä‡∏°‡∏ï‡∏£‡∏≤ "postponed" ‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏î‡∏ô‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô 
        
        # (‡πÄ‡∏£‡∏≤‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏±‡πä‡∏°‡∏ï‡∏£‡∏≤ postponed ‡πÑ‡∏ß‡πâ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏¢‡∏Å‡πÅ‡∏¢‡∏∞‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà '‡πÄ‡∏Ñ‡∏¢' ‡∏ñ‡∏π‡∏Å‡∏à‡∏±‡∏î‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏ï‡πà‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô)
        
        schedule_after_postpone = []
        has_postponed_anything = False
        for slot in current_schedule:
            slot_date_str = slot.get('date', '').split('T')[0]
            if slot_date_str == date_to_postpone_str and slot.get('status') == 'pending':
                slot['status'] = 'postponed' 
                has_postponed_anything = True
            schedule_after_postpone.append(slot)
        
        if not has_postponed_anything:
            print(f"[INFO] No pending tasks to postpone for {date_to_postpone_str}")
            return jsonify({"message": "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏≠‡πà‡∏≤‡∏ô‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô"}), 200

        # 4. üí° [Logic ‡πÉ‡∏´‡∏°‡πà] - ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÉ‡∏´‡∏°‡πà
        
        # 4.1 ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏ß‡∏±‡∏ô/‡πÄ‡∏ß‡∏•‡∏≤‡∏ß‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
        today = datetime.now().date()
        available_slots_for_reschedule = [] 

        # ‡∏´‡∏≤‡∏ß‡∏±‡∏ô‡∏™‡∏≠‡∏ö (Deadline)
        exam_date_obj = datetime.fromisoformat(exam_date_str.replace('Z', '+00:00')).date()
        
        # ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏™‡∏≠‡∏ö (‡∏à‡∏≤‡∏Å study_plan_raw)
        for day in study_plan_raw:
            try:
                # ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ß‡πà‡∏≤‡∏á (‡πÉ‡∏ô study_plan_raw) ‡πÄ‡∏õ‡πá‡∏ô object date
                slot_date_obj = datetime.fromisoformat(day['date'].replace('Z', '+00:00')).date()
                
                # ‡∏ñ‡πâ‡∏≤‡∏ß‡∏±‡∏ô‡∏ß‡πà‡∏≤‡∏á‡∏ô‡∏±‡πâ‡∏ô‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ (today) ‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ä‡∏ô‡∏ß‡∏±‡∏ô‡∏™‡∏≠‡∏ö
                if slot_date_obj >= today and slot_date_obj < exam_date_obj:
                    # Logic ‡∏ã‡∏≠‡∏¢‡∏¢‡πà‡∏≠‡∏¢‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏î‡∏¥‡∏° (‡πÄ‡∏≠‡∏≤ Slot 60 ‡∏ô‡∏≤‡∏ó‡∏µ)
                    slot_duration = 60
                    current_slot_start = time_to_minutes(day['startTime'])
                    day_end = time_to_minutes(day['endTime'])
                    
                    while current_slot_start < day_end and (current_slot_start + slot_duration) <= day_end:
                        # ‡πÉ‡∏ä‡πâ date/time ‡∏à‡∏≤‡∏Å study_plan_raw ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏ß‡πà‡∏≤‡∏á
                        available_slots_for_reschedule.append({
                            'date': day['date'], 
                            'startTime': minutes_to_time(current_slot_start),
                            'endTime': minutes_to_time(current_slot_start + slot_duration),
                        })
                        current_slot_start += slot_duration
            except Exception as e:
                print(f"Error processing study_plan_raw slot: {e}")
                continue
        
        if not available_slots_for_reschedule:
            return jsonify({"message": "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏±‡∏î‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏¢‡∏π‡πà‡∏Å‡πà‡∏≠‡∏ô‡∏ß‡∏±‡∏ô‡∏™‡∏≠‡∏ö"}), 400

        # 5. üí° [Logic ‡πÉ‡∏´‡∏°‡πà] - ‡∏à‡∏±‡∏î‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à (pending/postponed)
        
        # 5.1 ‡∏Ñ‡∏±‡∏î‡∏Å‡∏£‡∏≠‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
        completed_slots = [
            slot for slot in schedule_after_postpone 
            if slot.get('status') == 'completed'
        ]
        
        # 5.2 ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à
        # ‡πÄ‡∏£‡∏≤‡πÉ‡∏ä‡πâ generate_weighted_schedule() ‡∏Å‡∏±‡∏ö‡∏ß‡∏¥‡∏ä‡∏≤‡πÄ‡∏î‡∏¥‡∏° (‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏¢‡∏≤‡∏Å)
        # ‡πÅ‡∏ï‡πà‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç ‡πÉ‡∏´‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç 'subjects' ‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
        newly_generated_schedule = generate_weighted_schedule(
            exam_subjects_raw, 
            available_slots_for_reschedule
        )

        # 5.3 ‡πÄ‡∏û‡∏¥‡πà‡∏° slot_id ‡πÅ‡∏•‡∏∞ status ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
        final_new_slots_with_ids = []
        for slot in newly_generated_schedule:
            final_new_slots_with_ids.append({
                **slot,
                "slot_id": f"slot_{secrets.token_hex(8)}", 
                "status": "pending" 
            })

        # 6. üí° [Logic ‡πÉ‡∏´‡∏°‡πà] - ‡∏£‡∏ß‡∏°‡∏ï‡∏≤‡∏£‡∏≤‡∏á: ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß + ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
        
        # ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß (completed) ‡∏à‡∏∞‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà
        # ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô (postponed) ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏ó‡∏¥‡πâ‡∏á‡πÑ‡∏õ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏£‡∏≤‡∏à‡∏±‡∏î‡πÉ‡∏´‡∏°‡πà‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß
        # ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏ô‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß (completed_slots) ‡∏°‡∏≤‡πÉ‡∏™‡πà‡πÉ‡∏ô DB ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏°‡∏±‡∏ô‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ
        
        final_schedule_to_save = completed_slots + final_new_slots_with_ids

        # 7. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡∏•‡∏á DB
        result = exam_plans_collection.update_one(
            {"_id": ObjectId(plan_id)},
            {"$set": {"generated_schedule": final_schedule_to_save}}
        )

        print("[SUCCESS] Full Reschedule and recalculation complete.")
        return jsonify({"message": "‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß"}), 200

    except Exception as e:
        print(f"[ERROR] reschedule_plan (Full Recalculation): {e}\n{traceback.format_exc()}")
        return jsonify({"message": "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà"}), 500